// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  password        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  project         Project[]
  ProjectRoleUser ProjectRoleUser[]
}

model Role {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  permissions     Permission[]
  ProjectRoleUser ProjectRoleUser[]
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique
  roles Role[]
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime?
  done        Boolean?  @default(false)
  projectId   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project? @relation(fields: [projectId], references: [id])
}

model Project {
  id     Int    @id @default(autoincrement())
  title  String
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User              @relation(fields: [userId], references: [id])
  tasks           Task[]
  ProjectRoleUser ProjectRoleUser[]
}

model ProjectRoleUser {
  projectId Int
  roleId    Int
  userId    Int

  project Project @relation(fields: [projectId], references: [id])
  role    Role    @relation(fields: [roleId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@id([projectId, roleId, userId])
}
